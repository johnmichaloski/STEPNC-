
		error_status<> handle_no_value(ScannerT  const& scan, parser_error<std::string, string::iterator>& e )
		{
			//std::cerr << "No value in EP : "<<e.descriptor<<std::endl;
			// retry if it is a datacall, thus fail this rule
			return error_status<>( error_status<>::fail );
		}
		definition( CEBNFParser const &self )
		{   
			assertion<std::string> expect_semi("Semicolorn expected.");

			guard<std::string> guard_production;



		guard_production
				(
				Production = leftSide >>DefinitionList >>  expect_semi(ch_p(';')) ;
				)
				[
					error_handler()
				];

static short errcount = 0; 

enum expected_t
{
	open_paren_expected, close_paren_expected, open_brace_expected, close_brace_expected,
	comma_expected, semicolon_expected, close_bracket_expected
};

struct error_handler : public parser_error_base
{
  template <typename ScannerT> 
    int operator()(ScannerT const& scan, result_t& /*result*/) const 
    { 
        errcount++; 
		CString errmsg ;
		errmsg.Format("%s dected at line %d\n", _msg.c_str(), linenumber);
        cerr <<  errmsg  << endl; 
        return 0; 
    } 
	template <typename ScannerT, typename ErrorT>
	error_status<>
		operator()(ScannerT const& /*scan*/, ErrorT const& /*error*/) const
	{
		cout << "exception caught...Test concluded successfully" << endl;
		return error_status<>(error_status<>::fail);
	}
};

------------------------------------------------
		typedef boost::spirit::rule<ScannerT, boost::spirit::dynamic_parser_tag> rule_t;
		typedef boost::spirit::guard<expected_t> guard_t;
		typedef boost::spirit::assertion<expected_t> assertion_t;
static short errcount = 0; 


struct error_handler
{
  template <typename ScannerT, typename ErrorT>
    error_status<>
    operator()(ScannerT const& /*scan*/, ErrorT const& /*error*/) const
	{
		typename ErrorT::iterator_t iter( error.where );
		while ( *iter != '\0' && *iter != ';' )
		{
			++iter;
		}
		std::string str( error.where, iter );
		str = '\"' + str + '\"';

		text_line ln( get_text_line( error.where ) );
		switch ( error.descriptor )
		{
		case open_paren_expected:
			error( ln, _( "missing `%1%\' before %2%" ) % '(' % str );
			break;
		case close_paren_expected:
			error( ln, _( "missing `%1%\' before %2%" ) % ')' % str );
			break;
		case close_brace_expected:
			error( ln, _( "missing `%1%\' before %2%" ) % '}' % str );
			break;
		case semicolon_expected:
			error( ln, _( "missing `%1%\' before %2%" ) % ';' % str );
			break;
		case close_bracket_expected:
			error( ln, _( "missing `%1%\' before %2%" ) % '>' % str );
			break;
		}
		return  boost::spirit::error_status<>( boost::spirit::error_status<>::fail );
	}
private:

};



/////////////////////////////////////////////////////////////////////////////// 
// 
//  Error reporting parser 
// 
/////////////////////////////////////////////////////////////////////////////// 
struct error_report_parser : public parser_error_base { 
    
    error_report_parser(const char *msg) : _msg(msg) {}

    typedef nil_t result_t; 
    
    template <typename ScannerT> 
    int operator()(ScannerT const& scan, result_t& /*result*/) const 
    { 
        errcount++; 
		CString errmsg ;
		errmsg.Format("%s dected at line %d\n", _msg.c_str(), linenumber);
        cerr <<  errmsg  << endl; 
        return 0; 
    } 

private: 
	std::string _msg; 
}; 
typedef functor_parser<error_report_parser> error_report_p; 

			static  error_report_p error_missing_semicolon("missing semicolon"); 
			static  error_report_p error_missing_letter("missing letter"); 


Production = leftSide >>DefinitionList >>  (';' | error_missing_semicolon) ;