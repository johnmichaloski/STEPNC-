//
// SiemensSlot.h
//


// This software was developed by U.S. Government employees as part of
// their official duties and is not subject to copyright. No warranty implied 
// or intended.
/*
course_of_travel  travel_path  Center line of the slot. The tool is moved along this path to achieve the manufacturing of the slot. As with the entity pocket, the upper edge is given.  
swept_shape  open_profile  The (contoured) cross-section generated by a the tool, required for the selection of the proper tool For simple rectangular slot profiles, a square_u_profile should be specified giving only the width of the slot.  
end_conditions  LIST [ 0 : 2 ] OF slot_end_type  For a slot closed on one side, end conditions may be given here. The sequence is oriented conformable to the direction of the course_of_travel.  

It appears it would be easier to use pocket, except for the oscillating cutting motions (back and forth to clear out slot).
*/

#pragma once
#include "FeatureCycles.h"
#include "Siemens/Seimens840D.h"

class SiemensSlot;

class SiemensSlot :public IWorkCycle
{
public:
	SiemensSlot::SiemensSlot(IWorkCycles * owner): // IWorkCycle(wm),
	  IWorkCycle(owner) 
	  {
		  _parent=owner;
		  InitStepItems(&items);
		  InitOutputs(this);
		  InitTests(this);
	  }	
	  virtual ~SiemensSlot(){}
	FEATURECLASSDEF(SiemensSlot);  // prevents copy constructors

	virtual HRESULT DeriveParameters(IStepNodePtr pExecutable, IStepNodePtr pFeature, IStepNodePtr pOpItem) ;

	BEGIN_STEP_MAP(SiemensSlot)
		ENTRYSET(_T("Type"),			Cycle::Compute,		Cycle::String,		_T(""), _T("Slot"))

		ENTRY(_T("Location"),				Cycle::Feature,		Cycle::Vector,		_T("feature_placement/location/coordinates"))
		ENTRY(_T("Axis"),					Cycle::Feature,		Cycle::Vector,		_T("feature_placement/axis/direction_ratios"))
		ENTRY(_T("ReferenceDirection"),	Cycle::Feature,		Cycle::Vector,		_T("feature_placement/ref_direction/direction_ratios"))

		ENTRY(_T("CenterAbscissa"),		Cycle::Feature,		Cycle::Position,	_T("feature_placement/location/coordinates[0]"))
		ENTRY(_T("CenterOrdinate"),		Cycle::Feature,		Cycle::Position,	_T("feature_placement/location/coordinates[1]"))
		ENTRY(_T("MaxOneInfeedDepth"),		Cycle::Operation,	Cycle::Length,		_T("axial_cutting_depth"))

		ENTRY(_T("Length"),				Cycle::Feature,		Cycle::Length,		_T("feature_boundary/profile_length/theoretical_size"))
		ENTRY(_T("Width"),					Cycle::Feature,		Cycle::Length,		_T("feature_boundary/profile_width/theoretical_size"))
		ENTRY(_T("CornerRadius"),			Cycle::Feature,		Cycle::Length,		_T("orthogonal_radius/theoretical_size"))
		ENTRY(_T("CenterAbscissa"),		Cycle::Feature,		Cycle::Position,	_T("feature_placement/location/coordinates[0]"))
		ENTRY(_T("CenterOrdinate"),		Cycle::Feature,		Cycle::Position,	_T("feature_placement/location/coordinates[1]"))
		ENTRY(_T("MaxOneInfeedDepth"),		Cycle::Operation,	Cycle::Length,		_T("axial_cutting_depth"))


		ENTRY(_T("FeatureName"),		Cycle::Feature,		Cycle::String,		_T("its_id"))
		ENTRY(_T("AbsDepth"),				Cycle::Feature,		Cycle::Position,	_T("depth/position/location/coordinates[2]"))

		ENTRY(_T("CutterComp"), _T("Operation"), _T("String"), _T("its_technology/feedrate_reference"))
		ENTRY(_T("Feature"),				Cycle::Feature,		Cycle::Classname,	_T(""))
		ENTRY(_T("FinishAllowanceDepth"),	Cycle::Operation,	Cycle::Length,		_T("allowance_bottom"))
		ENTRY(_T("FinishAllowanceSide"),	Cycle::Operation,	Cycle::Length,		_T("allowance_side"))
		ENTRY(_T("InfeedFeedrate"),		Cycle::Operation,	Cycle::Feed,		_T("its_technology/feedrate"))
		ENTRY(_T("Operation"),				Cycle::Operation,	Cycle::Classname,	_T(""))
		ENTRY(_T("MachiningStrategy"),		Cycle::Operation,	Cycle::Classname,	_T("its_machining_strategy"))
		ENTRY(_T("PlacementRefDirection"), Cycle::Feature,		Cycle::Vector,		_T("feature_placement/ref_direction/direction_ratios"))
		ENTRY(_T("ReferencePlane"),		Cycle::Feature,		Cycle::Position,	_T("feature_placement/location/coordinates[2]"))
		ENTRY(_T("RetractPlane"),			Cycle::Operation,	Cycle::Position,	_T("retract_plane"))
		ENTRY(_T("StepSpeed"),			Cycle::Operation,	Cycle::Speed,		_T("its_technology/spindle"))
		ENTRY(_T("StartAbscissa"),			Cycle::Feature,		Cycle::Position,	_T("feature_placement/location/coordinates[0]"))
		ENTRY(_T("StartOrdinate"),			Cycle::Feature,		Cycle::Position,	_T("feature_placement/location/coordinates[1]"))
		ENTRY(_T("StepFeedrate"),			Cycle::Operation,	Cycle::Feed,		_T("its_technology/feedrate"))

		ENTRY(_T("Angle"),					Cycle::Compute,		Cycle::Angle,		_T("Angle = acos(Dot(Vector(1,0,0), PlacementRefDirection)) * 180.0 / M_PI;"))
		ENTRY(_T("CycleType"),				Cycle::Compute,		Cycle::Long,		_T("CycleType = 1.0 + Find(Operation, \"finish\")")) 
		ENTRY(_T("Feedrate"),				Cycle::Compute,		Cycle::Feed,		_T("Feedrate = StepFeedrate * 1000.0 * 60.0 ;"))
		ENTRY(_T("InfeedFeedrate"),		Cycle::Compute,		Cycle::Feed,		_T("InfeedFeedrate = StepFeedrate * 1000.0 * 60.0 ;"))
		ENTRY(_T("MillingDirection"),		Cycle::Compute,		Cycle::Long,		_T("MillingDirection = 1.0;")) 
		ENTRY(_T("RetractionTravel"),		Cycle::Compute,		Cycle::Length,		_T("RetractionTravel=0.0;")) 
		ENTRY(_T("SafetyPlane"),			Cycle::Compute,		Cycle::Length,		_T("SafetyPlane	= 2.0;"))
		ENTRY(_T("Speed"),					Cycle::Compute,		Cycle::Speed,		_T("Speed = fabs(SpindleSpeed);"))
		ENTRY(_T("SpindleDir"),			Cycle::Compute,		Cycle::Long,		_T("SpindleDir=( 3.0 + (SpindleSpeed>=0));")) 


		ENTRY(_T("RoughingTolerance"),		Cycle::Compute,		Cycle::Length,		_T("")) 
		ENTRY(_T("FinishingTolerance"),	Cycle::Compute,		Cycle::Length,		_T("")) 
		LINK(SiemensTool)


	END_STEP_MAP(SiemensSlot)

	BEGIN_OUTPUT_PARAMETER_MAP(SiemensSlot)
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("G0  F2000 "), _T(""), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("X%.3f "), _T("CenterAbscissa"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("Y%.3f "), _T("CenterOrdinate"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("Z%.3f\n"), _T("RetractPlane"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("F%.3f"), _T("Feedrate"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("M0%d"), _T("SpindleDir"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("S%.3f\n"), _T("Speed"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Rough"),  _T("CYCLE832(%.3f,1003)\n"), _T("RoughingTolerance"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Finish"), _T("CYCLE832(%.3f,102001)\n"), _T("FinishingTolerance"), _T(""))

		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("POCKET1("), _T(""), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("RetractPlane"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("ReferencePlane"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("SafetyPlane"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("AbsDepth"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T(" , "), _T(""), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T(" 1, "), _T(""), _T(""))  // number of slots
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("Length"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("Width"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("CenterAbscissa"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("CenterOrdinate"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("Angle"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("InfeedFeedrate"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("Feedrate"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("MaxOneInfeedDepth"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%d, "), _T("MillingDirection"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%.3f, "), _T("FinishAllowanceSide"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T("%d, "), _T("CycleType"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Finish"), _T(" , "), _T(""), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Finish"), _T("%.3f, "), _T("MaxOneInfeedDepth"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Finish"), _T("%.3f, "), _T("Feedrate"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Finish"), _T("%.3f, "), _T("Speed"), _T(""))
		STEPNC_OUTPUT_ENTRY(_T("Both"), _T(")\n"), _T(""), _T(""))
	END_OUTPUT_PARAMETER_MAP(SiemensSlot)

	BEGIN_VERIFY_PARAMETER_MAP(SiemensSlot)
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("CutterComp != \"TCP\"") , _T(""))
		STEPNC_VERIFY_ENTRY(_T("Warning"), _T("Both"), _T("RetractPlane == 0.0") ,_T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("RetractPlane <= ReferencePlane") , _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("ReferencePlane <= AbsDepth") ,  _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("Feedrate <= 0.0") ,  _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("Speed <= 0.0") ,  _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("Length <= 0.0") ,  _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("Width <= 0.0") ,  _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("CornerRadius <= 0.0") ,  _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("Toollength < (ReferencePlane - AbsDepth)") ,  _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("Toolradius >= CornerRadius") ,  _T(""))
		STEPNC_VERIFY_ENTRY(_T("Error"), _T("Both"), _T("Toolradius  > Width") ,  _T(""))
	END_VERIFY_PARAMETER_MAP(SiemensSlot)

	/*
	The other parameters can be selected as options. They define the insertion strategy and overlapping
	for solid machining:
	_MIDA real Maximum infeed width as a value in solid machining in the plane
	_AP1 real Blank dimension of pocket length
	_AP2 real Blank dimension of pocket width
	_AD real Blank pocket depth dimension from reference plane
	_RAD1 real Radius of the helical path on insertion (relative to the tool center point
	path) or maximum insertion angle for reciprocating motion
	_DP1 real Insertion depth per 360° revolution on insertion along helical path
	*/
};
FEATURE_DECLARE_SMARTPOINTER(SiemensSlot);


//////////////////////////////////////////////////////////////////////////////////////////

HRESULT SiemensSlot::DeriveParameters(IStepNodePtr pExecutable, IStepNodePtr pFeature, IStepNodePtr pOpItem) 
{
	IWorkCycle::DeriveParameters(pExecutable, pFeature, pOpItem);
	CCannedCycleItems * items = GetStepMap();  // initialize output for now...	


	//radiused_slot_end_type the end of the slot consists of an arc. The diameter equals the width of the slot. The center of the arc is identical with the end point of course_of_travel.

	/* flat_slot_end_type  The end of the slot consists of a flat line with two arcs connecting the end to the sides of the slot. 
	The radii of the two arcs are given. When traversing the slot along its center line from start to finish, 
	the radius on the left side of the center line is corner_radius1, the radius on the right side of the center 
	line is corner_radius2. The end point of course_of_travel is in the flat end of the slot.
	*/

	double d = Dot(Vector(1,0,0),  items->GetValue<Vector>(_T("PlacementRefDirection"))); 
	items->SetVariable(_T("Angle"), (double) acos( d ) * 180.0 / M_PI);

	CString Operation = items->GetValue<tstring>(_T("Operation")).c_str();
	items->SetVariable(_T("CycleType"),  1.0 + (Operation.Find(_T("finish"))>=0)) ;
	
	items->SetVariable(_T("Feedrate"), items->GetValue<double>(_T("StepFeedrate")) * 1000.0 * 60.0) ;
	items->SetVariable(_T("InfeedFeedrate"), items->GetValue<double>(_T("StepFeedrate")) * 1000.0 * 60.0) ;
	items->SetVariable(_T("MillingDirection"), (long) 2) ;
	items->SetVariable(_T("RetractPlane"), items->GetValue<double>(_T("ReferencePlane"))+ 10.0) ;
	items->SetVariable(_T("SafetyPlane"), 2.0) ;
	items->SetVariable(_T("Speed"), fabs(items->GetValue<double>(_T("StepSpeed")))) ;
	items->SetVariable(_T("SpindleDir"), 3.0 + (items->GetValue<double>(_T("StepSpeed"))>=0)) ;
	items->SetVariable(_T("RoughingTolerance"), (double) 0.01) ;
	items->SetVariable(_T("FinishingTolerance"), (double) 0.001) ;

	// if tooling is wrong revise items list before calling this.
	SiemensTool tool;
	_toolnum= tool.DeriveToolParameters(_parent, items, pFeature,  pOpItem);

	debugstream << GetStepMap()->ToString();

	return S_OK;

}
